.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RDF::Query::Client 3"
.TH RDF::Query::Client 3 "2009-11-12" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RDF::Query::Client \- Client for W3C SPARQL Protocol 1.0
.SH "VERSION"
.IX Header "VERSION"
0.02
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use RDF::Query::Client;
\&  
\&  my $query = new RDF::Query::Client ("SELECT * WHERE {?s ?p ?o. ?o ?p ?s.}");
\&  my $iterator = $query\->execute(\*(Aqhttp://example.com/sparql\*(Aq);
\&  while (my $row = $iterator\->next) {
\&    print $row\->{\*(Aqs\*(Aq}\->as_string;
\&  }
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """new ( $query, \e%opts )""" 4
.el .IP "\f(CWnew ( $query, \e%opts )\fR" 4
.IX Item "new ( $query, %opts )"
Returns a new RDF::Query::Client object for the specified \f(CW$query\fR.
The object's interface is designed to be roughly compatible with RDF::Query
objects. The query language is always 'sparql'.
.Sp
Options include:
.Sp
.Vb 1
\&    * UserAgent \- an LWP::UserAgent to handle HTTP requests.
.Ve
.ie n .IP """execute ( $endpoint, \e%opts )""" 4
.el .IP "\f(CWexecute ( $endpoint, \e%opts )\fR" 4
.IX Item "execute ( $endpoint, %opts )"
\&\f(CW$endpoint\fR is a \s-1URI\s0 object or string containing the endpoint
\&\s-1URI\s0 to be queried.
.Sp
Options include:
.Sp
.Vb 7
\&    * UserAgent \- an LWP::UserAgent to handle HTTP requests.
\&    * QueryMethod \- \*(AqGET\*(Aq, \*(AqPOST\*(Aq or undef (automatic).
\&    * QueryParameter \- defaults to \*(Aqquery\*(Aq.
\&    * AuthUsername \- HTTP Basic authorization.
\&    * AuthPassword \- HTTP Basic authorization.
\&    * Headers \- additional headers to include (hashref).
\&    * Parameters \- additional GET/POST fields to include (hashref).
.Ve
.Sp
Returns undef on error; an RDF::Trine::Iterator if called in a
scalar context; an array obtained by calling \f(CW\*(C`get_all\*(C'\fR on the
iterator if called in list context.
.ie n .IP """get ( $endpoint, \e%opts )""" 4
.el .IP "\f(CWget ( $endpoint, \e%opts )\fR" 4
.IX Item "get ( $endpoint, %opts )"
Executes the query using the specified endpoint, and returns the first matching row
as a \s-1LIST\s0 of values. Takes the same arguments as \f(CW\*(C`execute()\*(C'\fR.
.ie n .IP """as_sparql ()""" 4
.el .IP "\f(CWas_sparql ()\fR" 4
.IX Item "as_sparql ()"
Returns the query as a string in the \s-1SPARQL\s0 syntax.
.ie n .IP """useragent ()""" 4
.el .IP "\f(CWuseragent ()\fR" 4
.IX Item "useragent ()"
Returns the LWP::UserAgent object used for retrieving web content.
.ie n .IP """http_response ()""" 4
.el .IP "\f(CWhttp_response ()\fR" 4
.IX Item "http_response ()"
Returns the last \s-1HTTP\s0 Response the client experienced.
.ie n .IP """error ()""" 4
.el .IP "\f(CWerror ()\fR" 4
.IX Item "error ()"
Returns the last error the client experienced.
.ie n .IP """prepare ()""" 4
.el .IP "\f(CWprepare ()\fR" 4
.IX Item "prepare ()"
.PD 0
.ie n .IP """execute_plan ()""" 4
.el .IP "\f(CWexecute_plan ()\fR" 4
.IX Item "execute_plan ()"
.ie n .IP """execute_with_named_graphs ()""" 4
.el .IP "\f(CWexecute_with_named_graphs ()\fR" 4
.IX Item "execute_with_named_graphs ()"
.ie n .IP """aggregate ()""" 4
.el .IP "\f(CWaggregate ()\fR" 4
.IX Item "aggregate ()"
.ie n .IP """pattern ()""" 4
.el .IP "\f(CWpattern ()\fR" 4
.IX Item "pattern ()"
.ie n .IP """sse ()""" 4
.el .IP "\f(CWsse ()\fR" 4
.IX Item "sse ()"
.ie n .IP """algebra_fixup ()""" 4
.el .IP "\f(CWalgebra_fixup ()\fR" 4
.IX Item "algebra_fixup ()"
.ie n .IP """add_function ()""" 4
.el .IP "\f(CWadd_function ()\fR" 4
.IX Item "add_function ()"
.ie n .IP """supported_extensions ()""" 4
.el .IP "\f(CWsupported_extensions ()\fR" 4
.IX Item "supported_extensions ()"
.ie n .IP """supported_functions ()""" 4
.el .IP "\f(CWsupported_functions ()\fR" 4
.IX Item "supported_functions ()"
.ie n .IP """add_computed_statement_generator ()""" 4
.el .IP "\f(CWadd_computed_statement_generator ()\fR" 4
.IX Item "add_computed_statement_generator ()"
.ie n .IP """get_computed_statement_generators ()""" 4
.el .IP "\f(CWget_computed_statement_generators ()\fR" 4
.IX Item "get_computed_statement_generators ()"
.ie n .IP """net_filter_function ()""" 4
.el .IP "\f(CWnet_filter_function ()\fR" 4
.IX Item "net_filter_function ()"
.ie n .IP """add_hook_once ()""" 4
.el .IP "\f(CWadd_hook_once ()\fR" 4
.IX Item "add_hook_once ()"
.ie n .IP """add_hook ()""" 4
.el .IP "\f(CWadd_hook ()\fR" 4
.IX Item "add_hook ()"
.ie n .IP """parsed ()""" 4
.el .IP "\f(CWparsed ()\fR" 4
.IX Item "parsed ()"
.ie n .IP """bridge ()""" 4
.el .IP "\f(CWbridge ()\fR" 4
.IX Item "bridge ()"
.ie n .IP """log ()""" 4
.el .IP "\f(CWlog ()\fR" 4
.IX Item "log ()"
.ie n .IP """logger ()""" 4
.el .IP "\f(CWlogger ()\fR" 4
.IX Item "logger ()"
.ie n .IP """costmodel ()""" 4
.el .IP "\f(CWcostmodel ()\fR" 4
.IX Item "costmodel ()"
.PD
Each of these currently returns undef. They are placeholders
for compatibility with RDF::Query.
.SH "SECURITY"
.IX Header "SECURITY"
The \f(CW\*(C`<execute()\*(C'\fR> and \f(CW\*(C`<get()\*(C'\fR> methods allow AuthUsername and
AuthPassword options to be passed to them for \s-1HTTP\s0 Basic authentication.
For more complicated Authentication (Digest, OAuth, Windows, etc),
it is also possible to pass these methods a customised LWP::UserAgent.
.PP
If you have the Crypt::SSLeay package installed, requests to \s-1HTTPS\s0
endpoints should work. It's possible to specify a client X.509
certificate (e.g. for \s-1FOAF+SSL\s0 authentication) by setting particular
environment variables. See Crypt::SSLeay documentation for details.
.SH "BUGS"
.IX Header "BUGS"
Probably.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
RDF::Trine, RDF::Trine::Iterator
.IP "\(bu" 4
RDF::Query
.IP "\(bu" 4
LWP::UserAgent
.IP "\(bu" 4
http://www.w3.org/TR/rdf\-sparql\-protocol/
.IP "\(bu" 4
http://www.w3.org/TR/rdf\-sparql\-query/
.IP "\(bu" 4
http://www.perlrdf.org/
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster, <mail@tobyinkster.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009 by Toby Inkster
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.0 or,
at your option, any later version of Perl 5 you may have available.
